env:
    browser: true
    commonjs: true
    es6: true
plugins:
    - '@babel'
    - 'react'
parser: '@babel/eslint-parser'
parserOptions:
    ecmaVersion: 7
    sourceType: 'module'
    babelOptions:
        configFile: './config/.babel.config.json'
    ecmaFeatures:
        jsx: true
        modules: true
globals:
    process: readonly
settings:
    react:
        pragma: 'React'
        version: 'detect'
rules:
    for-direction: 'error'
    getter-return: 'error'
    no-compare-neg-zero: 'error'
    no-cond-assign: ['error', 'always']
    no-console: 'error'
    no-constant-condition: 'error'
    no-control-regex: 'error'
    no-debugger: 'error'
    no-dupe-args: 'error'
    no-dupe-keys: 'error'
    no-duplicate-case: 'error'
    no-empty: 'error'
    no-empty-character-class: 'error'
    no-ex-assign: 'error'
    no-extra-boolean-cast: 'error'
    no-extra-parens: ['error', 'all', { returnAssign: false, nestedBinaryExpressions: false }]
    no-extra-semi: 'error'
    no-func-assign: 'error'
    no-inner-declarations: 'error'
    no-invalid-regexp: 'error'
    no-irregular-whitespace: 'error'
    no-obj-calls: 'error'
    no-prototype-builtins: 'error'
    no-regex-spaces: 'error'
    no-sparse-arrays: 'warn'
    no-template-curly-in-string: 'warn'
    no-unexpected-multiline: 'error'
    no-unreachable: 'error'
    no-unsafe-finally: 'error'
    no-unsafe-negation: 'error'
    use-isnan: 'error'
    valid-typeof: 'error'
    accessor-pairs: 'error'
    array-callback-return: 'error'
    block-scoped-var: 'error'
    complexity: 'error'
    consistent-return: 'error'
    curly: 'error'
    default-case: 'error'
    dot-location: ['error', 'property']
    dot-notation: 'error'
    eqeqeq: 'error'
    guard-for-in: 'off'
    no-alert: 'off'
    no-caller: 'error'
    no-case-declarations: 'error'
    no-div-regex: 'error'
    no-else-return: ['error', { allowElseIf: false }]
    no-empty-function: 'error'
    no-empty-pattern: 'error'
    no-eq-null: 'error'
    no-eval: 'error'
    no-extend-native: 'error'
    no-extra-bind: 'error'
    no-extra-label: 'error'
    no-fallthrough: 'error'
    no-floating-decimal: 'error'
    no-global-assign: 'error'
    no-implicit-coercion: 'error'
    no-implicit-globals: 'error'
    no-implied-eval: 'error'
    no-invalid-this: 'error'
    no-iterator: 'error'
    no-labels: 'error'
    no-lone-blocks: 'error'
    no-loop-func: 'error'
    no-magic-numbers: ['error', { ignoreArrayIndexes: true }]
    no-multi-spaces: 'error'
    no-multi-str: 'error'
    no-new: 'error'
    no-new-func: 'error'
    no-new-wrappers: 'error'
    no-octal: 'error'
    no-octal-escape: 'error'
    no-param-reassign: 'error'
    no-proto: 'error'
    no-redeclare: 'error'
    no-return-assign: 'error'
    no-return-await: 'error'
    no-script-url: 'error'
    no-self-assign: 'error'
    no-self-compare: 'error'
    no-sequences: 'error'
    no-throw-literal: 'error'
    no-unmodified-loop-condition: 'error'
    no-unused-expressions: 'error'
    no-unused-labels: 'error'
    no-useless-call: 'error'
    no-useless-concat: 'error'
    no-useless-escape: 'error'
    no-useless-return: 'error'
    no-void: 'error'
    no-with: 'error'
    prefer-promise-reject-errors: 'error'
    radix: 'error'
    wrap-iife: ['error', 'inside']
    yoda: 'error'
    no-delete-var: 'error'
    no-label-var: 'error'
    no-shadow: 'error'
    no-shadow-restricted-names: 'error'
    no-undef: 'error'
    no-undef-init: 'error'
    no-undefined: 'error'
    no-unused-vars: 'error'
    no-use-before-define: 'error'
    callback-return: 'error'
    global-require: 'error'
    handle-callback-err: 'error'
    no-buffer-constructor: 'error'
    no-mixed-requires: 'error'
    no-new-require: 'error'
    array-bracket-newline: ['error', { 'multiline': true }]
    array-bracket-spacing: ['error', 'never']
    block-spacing: 'error'
    brace-style: 'error'
    camelcase: 'error'
    comma-dangle: ['error', 'never']
    comma-spacing: 'error'
    comma-style: 'error'
    computed-property-spacing: 'error'
    consistent-this: ['error', 'self']
    eol-last: 'error'
    func-call-spacing: 'error'
    func-name-matching: 'error'
    func-names: ['error', 'never']
    function-paren-newline: ['error', 'multiline']
    implicit-arrow-linebreak: 'error'
    indent: 'error'
    key-spacing: 'error'
    keyword-spacing: 'error'
    line-comment-position: 'error'
    lines-around-comment: 'error'
    lines-between-class-members: 'error'
    max-depth: 'error'
    max-len: ['error', {'code': 120}]
    max-lines: ['error', 500]
    max-nested-callbacks: 'error'
    max-params: 'error'
    max-statements: 'off'
    max-statements-per-line: 'error'
    multiline-comment-style: 'error'
    multiline-ternary: 'error'
    new-parens: 'error'
    newline-per-chained-call: 'error'
    no-array-constructor: 'error'
    no-bitwise: 'error'
    no-continue: 'error'
    no-inline-comments: 'error'
    no-lonely-if: 'error'
    no-mixed-operators: 'error'
    no-mixed-spaces-and-tabs: 'error'
    no-multi-assign: 'error'
    no-multiple-empty-lines: 'error'
    no-negated-condition: 'error'
    no-nested-ternary: 'error'
    no-new-object: 'error'
    no-tabs: 'error'
    no-trailing-spaces: 'error'
    no-unneeded-ternary: 'error'
    no-whitespace-before-property: 'error'
    object-curly-newline: ['error', { multiline: true, consistent: true }]
    object-curly-spacing: ['error', 'always']
    operator-assignment: ['error', 'never']
    operator-linebreak: ['error', 'after']
    quote-props: 'error'
    quotes: ['error', 'single']
    semi: 'error'
    semi-spacing: 'error'
    semi-style: 'error'
    space-before-blocks: 'error'
    space-before-function-paren: ['error', 'never']
    space-in-parens: 'error'
    switch-colon-spacing: 'error'
    #react-plugin-rules
    react/boolean-prop-naming: 'error'
    react/default-props-match-prop-types: 'error'
    react/destructuring-assignment: 'error'
    react/function-component-definition: 'error'
    react/no-access-state-in-setstate: 'error'
    react/no-adjacent-inline-elements: 'error'
    react/no-array-index-key: 'error'
    react/no-children-prop: 'error'
    react/no-danger: 'error'
    react/no-danger-with-children: 'error'
    react/no-deprecated: 'error'
    react/no-did-mount-set-state: 'error'
    react/no-did-update-set-state: 'error'
    react/no-direct-mutation-state: 'error'
    react/no-find-dom-node: 'error'
    react/no-is-mounted: 'error'
    react/no-redundant-should-component-update: 'error'
    react/no-render-return-value: 'error'
    react/no-string-refs: 'error'
    react/no-this-in-sfc: 'error'
    react/no-typos: 'error'
    react/no-unescaped-entities: 'error'
    react/no-unknown-property: 'error'
    react/no-unsafe: 'error'
    react/no-unused-prop-types: 'error'
    react/no-unused-state: 'error'
    react/no-will-update-set-state: 'error'
    react/prefer-es6-class: 'error'
    react/prefer-read-only-props: 'error'
    react/prop-types: 'error'
    react/react-in-jsx-scope: 'error'
    react/require-default-props: 'error'
    react/require-render-return: 'error'
    react/self-closing-comp: 'error'
    react/sort-comp: 'error'
    react/sort-prop-types:
        - 'error'
        -
            callbacksLast: true
            requiredFirst: true
            noSortAlphabetically: true
    react/state-in-constructor: 'error'
    react/void-dom-elements-no-children: 'error'
    react/jsx-boolean-value:
        - 'error'
        - 'always'
    react/jsx-child-element-spacing: 'error'
    react/jsx-closing-bracket-location:
        - 'error'
        - 'after-props'
    react/jsx-curly-brace-presence:
        - 'error'
        -
            props: 'always'
            children: 'always'
    react/jsx-curly-newline: 'error'
    react/jsx-equals-spacing: 'error'
    react/jsx-first-prop-new-line:
        - 'error'
        - 'multiline'
    react/jsx-fragments: 'error'
    react/jsx-handler-names: 'error'
    react/jsx-indent: 'error'
    react/jsx-indent-props:
        - 'error'
        - 4
    react/jsx-key: 'error'
    react/jsx-max-props-per-line: 'error'
    react/jsx-no-bind:
        - 'error'
        -
            allowArrowFunctions: true
    react/jsx-no-comment-textnodes: 'error'
    react/jsx-no-duplicate-props: 'error'
    react/jsx-no-literals: 'error'
    react/jsx-no-script-url: 'error'
    react/jsx-no-target-blank: 'error'
    react/jsx-no-undef: 'error'
    react/jsx-no-useless-fragment: 'error'
    react/jsx-one-expression-per-line: 'error'
    react/jsx-pascal-case: 'error'
    react/jsx-props-no-multi-spaces: 'error'
    react/jsx-props-no-spreading: 'error'
    react/jsx-tag-spacing:
        - 'error'
        -
            closingSlash: 'never'
            beforeSelfClosing: 'never'
            afterOpening: 'never'
            beforeClosing: 'never'
    react/jsx-uses-react: 'error'
    react/jsx-uses-vars: 'error'
    #TODO: from bug here: https://github.com/yannickcr/eslint-plugin-react/issues/1469,
    #this rule is currently not working
    #need to update in next version of react plugin, should be
    #
    # -
    #     declaration: 'parens-new-line'
    #     assignment: 'parens-new-line'
    #     return: 'parens-new-line'
    #     arrow: 'parens-new-line'
    #     condition: 'parens-new-line'
    #     logical: 'parens-new-line'
    #     props: 'parens-new-line'
    react/jsx-wrap-multilines:
        - 'error'
